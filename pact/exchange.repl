
(begin-tx)
(env-data
 { 'ns-admin-keyset: ["admin"]
 , 'ns-operate-keyset: ["operate"]
 , 'ns-genesis-keyset: { "keys": [], "pred": "="} })
(load "root/fungible-v2.pact")
(load "root/coin.pact")
(load "root/ns.pact")

(env-data
  { 'swap-ns-user: ["swap-user"]
  , 'swap-ns-admin: ["swap-admin"]
  , 'ns: "swap"
  , 'upgrade: false
  })
(env-keys ["operate", "swap-user", "swap-admin"])

(load "ns.pact")
(load "fungible-util.pact")
(load "tokens.pact")
(load "swap-callable.pact")
(load "exchange.pact")

(env-data { 'ns: "swap", 'upgrade: false })
(load "test/ABC.pact")
(load "test/XYZ.pact")
(commit-tx)

;; test upgradeability
(begin-tx)
(env-data
  { 'swap-ns-user: ["swap-user"]
  , 'swap-ns-admin: ["swap-admin"]
  , 'ns: "swap"
  , 'upgrade: true })
(env-keys ["operate", "swap-user", "swap-admin"])

(load "ns.pact")
(load "fungible-util.pact")
(load "tokens.pact")
(load "exchange.pact")

(begin-tx)
(load "test/tokens-test-fungible.pact")
(load "test/fungible.repl")

(test-capability (swap.tokens.CREDIT TOKEN FUNDER_ACCT))
(expect "fund success" true
  (test-fund FUNDER_ACCT FUNDER_GUARD FUNDER_BALANCE))
(commit-tx)

; (fungible-v2-test.suite tokens-test-fungible
;    fungible-test-helper-default "transfer-crosschain-tests")

(begin-tx)
(env-sigs [])

;; test pair canonicity
(use swap.exchange)
(expect "canonical pair keys match"
  (get-pair-key swap.abc coin)
  (get-pair-key coin swap.abc))
(expect "pair does not exist yet" false
  (pair-exists swap.abc coin))

;; test governance on create-pair
(expect-failure
  "create pair fails without governance"
  "Keyset failure (keys-all): 'swap-ns-admin"
  (create-pair coin swap.abc "")
)

(env-keys ["swap-admin"])

(create-pair coin swap.abc "")
(create-pair coin swap.xyz "")
(expect "create-pair (2) events" ;; TODO reverse
  [ { "name": "swap.exchange.CREATE_PAIR"
    , "params": [ coin swap.abc "coin:swap.abc"
                  (at 'account (get-pair swap.abc coin))]
    , "module-hash": (at 'hash (describe-module "swap.exchange"))
    }
    { "name": "swap.exchange.CREATE_PAIR"
    , "params": [ coin swap.xyz "coin:swap.xyz"
                  (at 'account (get-pair swap.xyz coin))]
    , "module-hash": (at 'hash (describe-module "swap.exchange"))
    }
  ]
  (env-events true))

(env-data
  { 'bob: ["bob"]
  , 'alice: ["alice"]
  })

(test-capability (coin.COINBASE))
(coin.coinbase "Bob" (read-keyset 'bob) 1000.0)
(swap.abc.create-account "Bob" (read-keyset 'bob))
(swap.abc.fund "Bob" 2000.0)
(swap.xyz.create-account "Bob" (read-keyset 'bob))
(swap.xyz.fund "Bob" 600.0)
(coin.coinbase "Alice" (read-keyset 'alice) 10000.0)
(swap.abc.create-account "Alice" (read-keyset 'alice))
(swap.abc.fund "Alice" 20000.0)
(commit-tx)


;;
;; add-liquidity
;;
(begin-tx)
(use swap.exchange)

(env-sigs [
  { 'key: "bob"
  , 'caps:
    [(coin.TRANSFER "Bob" (at 'account (get-pair swap.abc coin)) 10.0)
     (swap.abc.TRANSFER "Bob" (at 'account (get-pair swap.abc coin)) 40.0)
    ]
  }])

(expect "add-liquidity"
  { "liquidity": 19.9
  , "supply": 20.0
  , "amount0": 10.0
  , "amount1": 40.0 }
  (add-liquidity
    coin
    swap.abc
    10.0
    40.0
    10.0
    40.0
    "Bob"
    "Bob"
    (read-keyset 'bob)
    ))

(expect "add-liquidity events"
  [ { "name": "coin.TRANSFER"
    , "params": ["Bob" (at 'account (get-pair swap.abc coin)) 10.0]
    , "module-hash": (at 'hash (describe-module "coin"))
    }
    { "name": "swap.abc.TRANSFER"
    , "params": ["Bob" (at 'account (get-pair swap.abc coin)) 40.0]
    , "module-hash": (at 'hash (describe-module "swap.abc"))
    }
    { "name": "swap.tokens.MINT"
    , "params": [ (get-pair-key coin swap.abc)
                  LOCK_ACCOUNT 0.1]
    , "module-hash": (at 'hash (describe-module "swap.tokens"))
    }
    { "name": "swap.tokens.MINT"
    , "params": [(get-pair-key coin swap.abc) "Bob" 19.9]
    , "module-hash": (at 'hash (describe-module "swap.tokens"))
    }
    { "name": "swap.exchange.UPDATE"
    , "params": [(get-pair-key coin swap.abc) 10.0 40.0]
    , "module-hash": (at 'hash (describe-module "swap.exchange"))
    }
  ]
  (env-events true))

(expect "token liquidity for bob"
  19.9
  (swap.tokens.get-balance (get-pair-key coin swap.abc) "Bob")
)
(expect "minimum liquidity locked"
  MINIMUM_LIQUIDITY
  (swap.tokens.get-balance (get-pair-key coin swap.abc) LOCK_ACCOUNT)
)
(expect "total supply for pair token"
  20.0
  (swap.tokens.total-supply (get-pair-key coin swap.abc))
)
(expect "kda debited for bob"
  990.0 (coin.get-balance "Bob"))
(expect "abc debited for bob"
  1960.0 (swap.abc.get-balance "Bob"))
(expect "kda credited for pair"
  10.0 (coin.get-balance (at 'account (get-pair coin swap.abc))))
(expect "abc credited for pair"
  40.0 (swap.abc.get-balance (at 'account (get-pair coin swap.abc))))

(rollback-tx)


(begin-tx)
(use swap.exchange)

(env-sigs [
  { 'key: "bob"
  , 'caps:
    [(coin.TRANSFER "Bob" (at 'account (get-pair swap.abc coin)) 20.0)
     (swap.abc.TRANSFER "Bob" (at 'account (get-pair swap.abc coin)) 80.0)
    ]
  }])

(expect-failure
  "add-liquidity precision enforcement, user-supplied, A"
  (add-liquidity
    coin
    swap.abc
    8.9999999999999
    33.00
    10.0
    40.0
    "Bob"
    "Bob"
    (read-keyset 'bob)
    ))

(expect-failure
  "add-liquidity precision enforcement, user-supplied, B"
  (add-liquidity
    coin
    swap.abc
    9.0
    33.33333333333333333
    10.0
    40.0
    "Bob"
    "Bob"
    (read-keyset 'bob)
    ))

  (expect
    "add-liquidity precision handling, setup compute"
    {"liquidity": 17.133687939614
    ,"supply": 17.233687939614
    ,"amount0": 9.0
    ,"amount1": 33.0 }
    (add-liquidity
      coin
      swap.abc
      9.0
      33.00
      10.0
      40.0
      "Bob"
      "Bob"
      (read-keyset 'bob)
      ))

  (expect "add-liquidity precision handling, computed"
    { "liquidity": 16.711454971745
    , "supply": 33.945142911359
    , "amount0": 8.727272727272
    , "amount1": 32.0 }
    (add-liquidity
      coin
      swap.abc
      9.0 ;; computes 8.727272...
      32.0
      1.0
      1.0
      "Bob"
      "Bob"
      (read-keyset 'bob)
      ))
;;
;; fixture
;;

(begin-tx)
(use swap.exchange)

(env-enable-repl-natives true)

(module fixture G
  (defcap G () true)
  (defun setup-abc (amount0:decimal amount1:decimal)
    (env-sigs
      [ { 'key: "bob"
        , 'caps:
          [ (coin.TRANSFER "Bob" (at 'account (get-pair swap.abc coin)) amount0)
            (swap.abc.TRANSFER "Bob" (at 'account (get-pair swap.abc coin)) amount1)
          ]}])
    (with-applied-env
      (add-liquidity coin swap.abc
        amount0 amount1 amount0 amount1
        "Bob" "Bob" (read-keyset "bob")
        ))
    (env-events true)
  )

  (defun setup-xyz (amount0:decimal amount1:decimal)
    (env-sigs
      [ { 'key: "bob"
        , 'caps:
          [ (coin.TRANSFER "Bob" (at 'account (get-pair swap.xyz coin)) 10.0)
            (swap.xyz.TRANSFER "Bob" (at 'account (get-pair swap.xyz coin)) 40.0)
          ]}])
    (with-applied-env
      (add-liquidity coin swap.xyz
        amount0 amount1 amount0 amount1
        "Bob" "Bob" (read-keyset "bob")
        ))
    (env-events true)
  )

)
(commit-tx)

;;
;; remove-liquidity
;;

(begin-tx)
(use swap.exchange)
(fixture.setup-abc 30.0 30.0)

(env-sigs [
  { 'key: "bob"
  , 'caps:
    [(swap.tokens.TRANSFER
      (get-pair-key coin swap.abc)
      "Bob"
      (at 'account (get-pair coin swap.abc))
      141.321356237309)
    ]}])
(expect "remove-liquidity result"
  { "amount0": 29.9
  , "amount1": 29.9 }
  (remove-liquidity swap.abc coin
    29.9
    29.9
    29.9
    "Bob"
    "Bob"
    (read-keyset 'bob)
    ))

(expect "remove-liquidity events" ;; TODO reverse
  [ { "name": "swap.tokens.TRANSFER"
    , "params": [ (get-pair-key coin swap.abc) "Bob"
                  (at 'account (get-pair coin swap.abc)) 29.9]
    , "module-hash": (at 'hash (describe-module "swap.tokens"))
    }
    { "name": "swap.tokens.BURN"
    , "params": [ (get-pair-key coin swap.abc)
                  (at 'account (get-pair coin swap.abc)) 29.9]
    , "module-hash": (at 'hash (describe-module "swap.tokens"))
    }
    { "name": "coin.TRANSFER"
    , "params": [(at 'account (get-pair coin swap.abc)) "Bob" 29.9]
    , "module-hash": (at 'hash (describe-module "coin"))
    }
    { "name": "swap.abc.TRANSFER"
    , "params": [(at 'account (get-pair coin swap.abc)) "Bob" 29.9]
    , "module-hash": (at 'hash (describe-module "swap.abc"))
    }
    { "name": "swap.exchange.UPDATE"
    , "params": [(get-pair-key coin swap.abc) 0.1 0.1]
    , "module-hash": (at 'hash (describe-module "swap.exchange"))
  } ]
  (env-events true))

(expect "token liquidity for bob"
  0.0
  (swap.tokens.get-balance (get-pair-key coin swap.abc) "Bob")
)
(expect "minimum liquidity locked"
  MINIMUM_LIQUIDITY
  (swap.tokens.get-balance (get-pair-key coin swap.abc) LOCK_ACCOUNT)
)
(expect "total supply for pair at minimum"
  MINIMUM_LIQUIDITY
  (swap.tokens.total-supply (get-pair-key coin swap.abc))
)
(expect-failure
  "Update supply cannot be directly called"
  (swap.tokens.update-supply "swap.abc" 20.0))
(expect "kda credited for bob"
  999.9 (coin.get-balance "Bob"))
(expect "abc credited for bob"
  1999.9 (swap.abc.get-balance "Bob"))
(expect "kda debited for pair"
  0.1 (coin.get-balance (at 'account (get-pair coin swap.abc))))
(expect "abc debited for pair"
  0.1 (swap.abc.get-balance (at 'account (get-pair coin swap.abc))))

(rollback-tx)

(begin-tx)
(use swap.exchange)
(fixture.setup-abc 30.0 30.0)
(expect-failure "remove-liquidity insufficient A"
  "insufficient A amount"
  (remove-liquidity swap.abc coin
    29.9
    30.0
    29.9
    "Bob"
    "Bob"
    (read-keyset 'bob)
    ))

(rollback-tx)

(begin-tx)
(use swap.exchange)
(fixture.setup-abc 30.0 30.0)
(expect-failure "remove-liquidity insufficient B"
  "insufficient B amount"
  (remove-liquidity swap.abc coin
    29.9
    29.9
    30.0
    "Bob"
    "Bob"
    (read-keyset 'bob)
    ))

(rollback-tx)

(begin-tx)
(use swap.exchange)
(fixture.setup-abc 30.0 30.0)
(expect-failure "remove-liquidity enforce user precision"
  "precision violation" ;; from swap.tokens
  (remove-liquidity swap.abc coin
    29.999999999999999999
    29.9
    30.0
    "Bob"
    "Bob"
    (read-keyset 'bob)
    ))

(rollback-tx)

(begin-tx)
(use swap.exchange)
(fixture.setup-abc 9.0 33.0)
(expect "remove-liquidity handle computed precision"
  { "amount0": 0.220503975941  ;; would be 0.22050397594156010548...
  , "amount1": 0.80851457845238 }
  (remove-liquidity swap.abc coin
    0.422232967869
    0.01
    0.01
    "Bob"
    "Bob"
    (read-keyset 'bob)
    ))
;;
;; swaps
;;


;;
;; single-leg swap tests
;;

(begin-tx)
(use swap.exchange)
(module swaps G
  (defcap G () true)

  (defun swap-test-case
    ( swapAmount:decimal
      token0Amount:decimal
      token1Amount:decimal
      expectedOutputAmount:decimal
    )
    (fixture.setup-abc token0Amount token1Amount)
    (env-sigs [
      { 'key: "alice"
      , 'caps:
        [ (coin.TRANSFER "Alice"
          (at 'account (get-pair swap.abc coin))
          swapAmount)
        ]}])
    (with-applied-env
      (coin.transfer "Alice"
        (at 'account (get-pair swap.abc coin))
        swapAmount))
    (swap swap.noop-callable
      "Alice"
      (read-keyset "alice")
      swap.abc
      expectedOutputAmount
      coin)
  )

  (defun optimistic-test-case
    ( outputAmount:decimal
      token0Amount:decimal
      token1Amount:decimal
      inputAmount:decimal
    )
    (fixture.setup-abc token0Amount token1Amount)
    (env-sigs [
      { 'key: "alice"
      , 'caps:
        [ (coin.TRANSFER "Alice"
          (at 'account (get-pair swap.abc coin))
          inputAmount)
        ]}])
    (with-applied-env
      (coin.transfer "Alice"
        (at 'account (get-pair swap.abc coin))
        inputAmount))
    (swap swap.noop-callable
      "Alice"
      (read-keyset "alice")
      coin
      outputAmount
      swap.abc)
  )
)

(commit-tx)

(begin-tx)
(swaps.swap-test-case 1.0 5.0 10.0 1.66249791562447)
(begin-tx)
(expect-failure "swap test 1" "K"
 (swaps.swap-test-case 1.0 5.0 10.0 1.66249791562448))

(begin-tx)
(swaps.swap-test-case 1.0 10.0 5.0 0.45330544694007)
(begin-tx)
(expect-failure "swap test 2" "K"
 (swaps.swap-test-case 1.0 10.0 5.0 0.45330544694008))

(begin-tx)
(swaps.swap-test-case 2.0 5.0 10.0 2.85101515584786)
(begin-tx)
(expect-failure "swap test 3" "K"
 (swaps.swap-test-case 2.0 5.0 10.0 2.85101515584787))

(begin-tx)
(swaps.swap-test-case 2.0 10.0 5.0 0.831248957812)
(begin-tx)
(expect-failure "swap test 4" "K"
 (swaps.swap-test-case 2.0 10.0 5.0 0.831248957813))

(begin-tx)
(swaps.swap-test-case 1.0 10.0 10.0 0.906610893880)
(begin-tx)
(expect-failure "swap test 5" "K"
 (swaps.swap-test-case 1.0 10.0 10.0 0.906610893881))

(begin-tx)
(swaps.swap-test-case 1.0 100.0 100.0 0.987158034397)
(begin-tx)
(expect-failure "swap test 6" "K"
 (swaps.swap-test-case 1.0 100.0 100.0 0.987158034398))

(begin-tx)
(swaps.swap-test-case 1.0 1000.0 1000.0 0.996006981039)
(begin-tx)
(expect-failure "swap test 7" "K"
 (swaps.swap-test-case 1.0 1000.0 1000.0 0.996006981040))

(begin-tx)
(swaps.optimistic-test-case 0.997 5.0 10.0 1.0)
(begin-tx)
(expect-failure "optimistic test 1" "K"
 (swaps.optimistic-test-case 0.997000000001 5.0 10.0 1.0))

(begin-tx)
(swaps.optimistic-test-case 0.997 10.0 5.0 1.0)
(begin-tx)
(expect-failure "optimistic test 2" "K"
 (swaps.optimistic-test-case 0.997000000001 10.0 5.0 1.0))

(begin-tx)
(swaps.optimistic-test-case 0.997 5.0 5.0 1.0)
(begin-tx)
(expect-failure "optimistic test 2" "K"
 (swaps.optimistic-test-case 0.997000000001 5.0 5.0 1.0))

(begin-tx)
(swaps.optimistic-test-case 1.0 5.0 5.0 1.003009027082)
;; TODO floor instead of round? old val 1.003009027081
(begin-tx)
(expect-failure "optimistic test 2" "K"
 (swaps.optimistic-test-case 1.000000000001 5.0 5.0 1.003009027082))

;;
;; swap-exact-in
;;

(begin-tx)
(use swap.exchange)
(fixture.setup-abc 30.0 30.0)

(env-sigs [
  { 'key: "alice"
  , 'caps:
    [(coin.TRANSFER "Alice" (at 'account (get-pair swap.abc coin)) 100.0)]
  }])

(env-gasmodel 'table)
(env-gaslimit 30000)
(expect "swap exact in"
  [ { "token": "coin", "amount": 8.0 }
    { "token": "swap.abc", "amount": 6.30082157151885 }
  ]
  (swap-exact-in 8.0 6.3 [coin swap.abc]
    "Alice" "Alice" (read-keyset 'alice) ))
(expect "swap gas" 1663 (env-gas))
(env-gasmodel 'fixed 0)

(expect "kda debited for alice"
  9992.0 (coin.get-balance "Alice"))
(expect "abc credited for alice"
  20006.30082157151885 (swap.abc.get-balance "Alice"))
(expect "kda credited for pair"
  38.0 (coin.get-balance (at 'account (get-pair coin swap.abc))))
(expect "abc debited for pair"
  23.69917842848115
  (swap.abc.get-balance (at 'account (get-pair coin swap.abc))))

(expect "swap-exact-in events"
  [ { "module-hash": (at 'hash (describe-module "coin"))
    , "name": "coin.TRANSFER"
    , "params": ["Alice" (at 'account (get-pair swap.abc coin)) 8.0]
    }
    { "module-hash": (at 'hash (describe-module "swap.abc"))
    , "name": "swap.abc.TRANSFER"
    , "params": [ (at 'account (get-pair swap.abc coin))
                  "Alice" 6.30082157151885]
    }
    { "module-hash": (at 'hash (describe-module "swap.exchange"))
    , "name": "swap.exchange.SWAP"
    , "params": [ (at 'account (get-pair swap.abc coin))
                  "Alice" 8.0 coin 6.30082157151885 swap.abc]
    }
    { "module-hash": (at 'hash (describe-module "swap.exchange"))
    , "name": "swap.exchange.UPDATE"
    , "params": [ (get-pair-key coin swap.abc)
                  38.0 23.69917842848115]
    }
  ]
  (env-events true))
(rollback-tx)

;; 3-way swap

(begin-tx)
(use swap.exchange)
(fixture.setup-abc 30.0 30.0)
(fixture.setup-xyz 10.0 40.0)


(env-sigs [
  { 'key: "alice"
  , 'caps:
    [(swap.abc.TRANSFER "Alice" (at 'account (get-pair swap.abc coin)) 30.0)
    ]
  }])

(expect "swap exact in 3-way"
  [ { "token": "swap.abc", "amount": 8.0}
    { "token": "coin", "amount": 6.300821571518}
    { "token": "swap.xyz", "amount": 15.43287143388036}
  ]
  (swap-exact-in 8.0 15.4 [swap.abc coin swap.xyz]
    "Alice" "Alice" (read-keyset 'alice) ))

(expect "abc debited for alice"
  19992.0 (swap.abc.get-balance "Alice"))
(expect "abc credited for coin:abc"
  38.0
  (swap.abc.get-balance (at 'account (get-pair coin swap.abc))))
(expect "kda debited for coin:abc"
  23.699178428482
  (coin.get-balance (at 'account (get-pair coin swap.abc))))
(expect "kda credited for coin:xyz"
  16.300821571518
  (coin.get-balance (at 'account (get-pair coin swap.xyz))))
(expect "xyz debited for coin:xyz"
  24.56712856611964
  (swap.xyz.get-balance (at 'account (get-pair coin swap.xyz))))
(expect "xyz credited for alice"
  15.43287143388036 (swap.xyz.get-balance "Alice"))
(expect "swap-exact-in 3-way events"
  [ { "module-hash": (at 'hash (describe-module "swap.abc"))
    , "name": "swap.abc.TRANSFER"
    , "params": ["Alice" (at 'account (get-pair swap.abc coin)) 8.0]
    }
    { "module-hash": (at 'hash (describe-module "coin"))
    , "name": "coin.TRANSFER"
    , "params": [ (at 'account (get-pair swap.abc coin))
                  (at 'account (get-pair swap.xyz coin)) 6.300821571518]
    }
    { "module-hash": (at 'hash (describe-module "swap.exchange"))
    , "name": "swap.exchange.SWAP"
    , "params": [ (at 'account (get-pair swap.abc coin))
                  (at 'account (get-pair swap.xyz coin))
                  8.0 swap.abc 6.300821571518 coin]
    }
    { "module-hash": (at 'hash (describe-module "swap.exchange"))
    , "name": "swap.exchange.UPDATE"
    , "params": [ (get-pair-key coin swap.abc)
                  23.699178428482 38.0]
    }
    { "module-hash": (at 'hash (describe-module "swap.xyz"))
    , "name": "swap.xyz.TRANSFER"
    , "params": [ (at 'account (get-pair swap.xyz coin))
                  "Alice" 15.43287143388036]
    }
    { "module-hash": (at 'hash (describe-module "swap.exchange"))
    , "name": "swap.exchange.SWAP"
    , "params": [ (at 'account (get-pair swap.xyz coin)) "Alice"
                  6.300821571518 coin 15.43287143388036 swap.xyz]
    }
    { "module-hash": (at 'hash (describe-module "swap.exchange"))
    , "name": "swap.exchange.UPDATE"
    , "params": [ (get-pair-key coin swap.xyz)
                  16.300821571518 24.56712856611964]
    }
  ]
  (env-events true))

(rollback-tx)

;;
;;
;; compute-in tests
;;

(begin-tx)
(use swap.exchange)
(fixture.setup-abc 1000.0 1000.0)

(expect "compute-in"
 [ 0.001003010031 0.001 ]
 (map (at 'in)
  (compute-in
    [ { 'token-out: coin
      , 'token-in: swap.abc
      , 'out: 0.0
      , 'in: 0.001
      , 'idx: 2
      , 'pair: (get-pair coin swap.abc)
      , 'path: []
      }] coin)))

;;
;; swap-exact-out
;;

(begin-tx)
(use swap.exchange)
(fixture.setup-abc 1000.0 1000.0)

(env-sigs [
  { 'key: "alice"
  , 'caps:
    [(coin.TRANSFER "Alice" (at 'account (get-pair swap.abc coin)) 100.0)
    ]
  }])

(expect "swap exact out"
  [ { "token": "coin", "amount": 0.001003010031 }
    { "token": "swap.abc", "amount": 0.001 }
  ]
  (swap-exact-out 0.001 0.002 [coin swap.abc]
    "Alice" "Alice" (read-keyset 'alice) ))
(expect "kda debited for alice"
  9999.998996989969 (coin.get-balance "Alice"))
(expect "abc credited for alice"
  20000.001 (swap.abc.get-balance "Alice"))
(expect "kda credited for pair"
  1000.001003010031 (coin.get-balance (at 'account (get-pair coin swap.abc))))
(expect "abc debited for pair"
  999.999
  (swap.abc.get-balance (at 'account (get-pair coin swap.abc))))

(rollback-tx)

;; 3-way out

(begin-tx)
(use swap.exchange)
(fixture.setup-abc 30.0 30.0)
(fixture.setup-xyz 10.0 40.0)

(env-sigs [
  { 'key: "alice"
  , 'caps:
    [(swap.abc.TRANSFER "Alice" (at 'account (get-pair swap.abc coin))
      28.78004347733101)]}])

(expect "swap exact out 3-way TODO"
  [ { "token": "swap.abc", "amount": 7.55088351629628 }
   { "token": "coin", "amount": 6.018054162488 }
   { "token": "swap.xyz", "amount": 15.0 }
  ]
  (swap.exchange.swap-exact-out 15.0 100.0 [swap.abc coin swap.xyz]
    "Alice" "Alice" (read-keyset 'alice) ))


(expect "abc debited for alice"
  19992.44911648370372 (swap.abc.get-balance "Alice"))
(expect "abc credited for coin:abc"
  37.55088351629628
  (swap.abc.get-balance (at 'account (get-pair coin swap.abc))))
(expect "kda debited for coin:abc"
  23.981945837512
  (coin.get-balance (at 'account (get-pair coin swap.abc))))
(expect "kda credited for coin:xyz"
  16.018054162488
  (coin.get-balance (at 'account (get-pair coin swap.xyz))))
(expect "xyz debited for coin:xyz"
  25.0
  (swap.xyz.get-balance (at 'account (get-pair coin swap.xyz))))
(expect "xyz credited for alice TODO"
  15.0
  (swap.xyz.get-balance "Alice"))

(rollback-tx)

;;
;; test callback
;;
(begin-tx)

(module optimistic-transfer G
  (defcap G () true)
  (implements swap.swap-callable-v1)
  (defun swap-call:bool
    ( token-in:module{fungible-v2}
      token-out:module{fungible-v2}
      amount-out:decimal
      sender:string
      recipient:string
      recipient-guard:guard
    )
    (coin.transfer recipient sender 8.0)
    true
  )
)

(commit-tx)

(begin-tx)
(use swap.exchange)
(fixture.setup-abc 30.0 30.0)


(env-sigs [
  { 'key: "alice"
  , 'caps:
    [(coin.TRANSFER "Alice"
     (at 'account (get-pair swap.abc coin))
      8.0)]}])

(expect "swap+callback success"
  { "token": "swap.abc"
  , "amount": 6.30082157151885
  }
  (swap
  optimistic-transfer
  "Alice" (read-keyset 'alice)
  swap.abc 6.30082157151885
  coin))

(expect "callback events"
  [ { "module-hash": (at 'hash (describe-module "swap.abc"))
    , "name": "swap.abc.TRANSFER"
    , "params": [ (at 'account (get-pair coin swap.abc)) "Alice"
                  6.30082157151885]
    }
    { "module-hash": (at 'hash (describe-module "coin"))
    ,"name": "coin.TRANSFER"
    ,"params": ["Alice" (at 'account (get-pair coin swap.abc)) 8.0]
    }
    { "module-hash": (at 'hash (describe-module "swap.exchange"))
    ,"name": "swap.exchange.SWAP"
    ,"params": [ (at 'account (get-pair coin swap.abc)) "Alice"
                 8.0 coin 6.30082157151885 swap.abc]
    }
    { "module-hash": (at 'hash (describe-module "swap.exchange"))
    , "name": "swap.exchange.UPDATE"
    , "params": ["coin:swap.abc" 38.0 23.69917842848115]
    } ]
  (env-events true))

(rollback-tx)

(begin-tx)
(use swap.exchange)
(fixture.setup-abc 30.0 30.0)


(env-sigs [
  { 'key: "alice"
  , 'caps:
    [(coin.TRANSFER "Alice"
     (at 'account (get-pair swap.abc coin))
      8.0)]}])

(expect-failure "swap+callback failure"
  "K"
  (swap
  optimistic-transfer
  "Alice" (read-keyset 'alice)
  swap.abc 6.30082157151886
  coin))
(rollback-tx)
