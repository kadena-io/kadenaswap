hash: CNyaolzzprUsJyxWBYMdAFbFm6Kkp7xQqWlnYe3CLYI
sigs:
  8cc8da8ea7cbfaf6510dbc5f402b025dceaa9a3eaf7145e0ba933d468b63d358: 3b85046dfe7fffd3c3e37b992dbdfe82dff525631a9b716a1bc600f8baaeefdf22df18b7b0f507fa048adab462abf621c18f60c0c6868099d19b6595014e3605
cmd: '{"networkId":"mainnet01","payload":{"exec":{"data":{"ns":"kswap","upgrade":false},"code":"(namespace (read-msg ''ns))\n(module abc GOVERNANCE\n\n  (implements fungible-v2)\n  (use fungible-util)\n\n  (defschema entry\n    balance:decimal\n    guard:guard)\n\n  (deftable ledger:{entry})\n\n  (defcap GOVERNANCE ()\n    (enforce-guard\n      (keyset-ref-guard ''swap-ns-admin)))\n\n  (defcap DEBIT (sender:string)\n    (enforce-guard (at ''guard (read ledger sender))))\n\n  (defcap CREDIT (receiver:string) true)\n\n  (defcap TRANSFER:bool\n    ( sender:string\n      receiver:string\n      amount:decimal\n    )\n    @managed amount TRANSFER-mgr\n    (enforce-valid-transfer sender receiver (precision) amount)\n    (compose-capability (DEBIT sender))\n    (compose-capability (CREDIT receiver))\n  )\n\n  (defun TRANSFER-mgr:decimal\n    ( managed:decimal\n      requested:decimal\n    )\n\n    (let ((newbal (- managed requested)))\n      (enforce (>= newbal 0.0)\n        (format \"TRANSFER exceeded for balance {}\" [managed]))\n      newbal)\n  )\n\n  (defconst MINIMUM_PRECISION 14)\n\n  (defun enforce-unit:bool (amount:decimal)\n    (enforce-precision (precision) amount))\n\n  (defun create-account:string\n    ( account:string\n      guard:guard\n    )\n    (enforce-valid-account account)\n    (insert ledger account\n      { \"balance\" : 0.0\n      , \"guard\"   : guard\n      })\n    )\n\n  (defun get-balance:decimal (account:string)\n    (at ''balance (read ledger account))\n  )\n\n  (defun details:object{fungible-v2.account-details}\n    ( account:string )\n    (with-read ledger account\n      { \"balance\" := bal\n      , \"guard\" := g }\n      { \"account\" : account\n      , \"balance\" : bal\n      , \"guard\": g })\n    )\n\n  (defun rotate:string (account:string new-guard:guard)\n    (with-read ledger account\n      { \"guard\" := old-guard }\n\n      (enforce-guard old-guard)\n\n      (update ledger account\n        { \"guard\" : new-guard }))\n    )\n\n  (defun fund:string (account:string amount:decimal)\n    (with-capability (GOVERNANCE)\n      (with-capability (CREDIT account)\n        (credit account\n          (at ''guard (read ledger account))\n          amount))))\n\n  (defun precision:integer ()\n    MINIMUM_PRECISION)\n\n  (defun transfer:string (sender:string receiver:string amount:decimal)\n\n    (enforce (!= sender receiver)\n      \"sender cannot be the receiver of a transfer\")\n    (enforce-valid-transfer sender receiver (precision) amount)\n\n    (with-capability (TRANSFER sender receiver amount)\n      (debit sender amount)\n      (with-read ledger receiver\n        { \"guard\" := g }\n        (credit receiver g amount))\n      )\n    )\n\n  (defun transfer-create:string\n    ( sender:string\n      receiver:string\n      receiver-guard:guard\n      amount:decimal )\n\n    (enforce (!= sender receiver)\n      \"sender cannot be the receiver of a transfer\")\n    (enforce-valid-transfer sender receiver (precision) amount)\n\n    (with-capability (TRANSFER sender receiver amount)\n      (debit sender amount)\n      (credit receiver receiver-guard amount))\n    )\n\n  (defun debit:string (account:string amount:decimal)\n\n    (require-capability (DEBIT account))\n    (with-read ledger account\n      { \"balance\" := balance }\n\n      (enforce (<= amount balance) \"Insufficient funds\")\n\n      (update ledger account\n        { \"balance\" : (- balance amount) }\n        ))\n    )\n\n\n  (defun credit:string (account:string guard:guard amount:decimal)\n\n    (require-capability (CREDIT account))\n    (with-default-read ledger account\n      { \"balance\" : 0.0, \"guard\" : guard }\n      { \"balance\" := balance, \"guard\" := retg }\n      ; we don''t want to overwrite an existing guard with the user-supplied one\n      (enforce (= retg guard)\n        \"account guards do not match\")\n\n      (write ledger account\n        { \"balance\" : (+ balance amount)\n        , \"guard\"   : retg\n        })\n      ))\n\n\n  (defpact transfer-crosschain:string\n    ( sender:string\n      receiver:string\n      receiver-guard:guard\n      target-chain:string\n      amount:decimal )\n    (step (enforce false \"cross chain not supported\"))\n    )\n\n)\n\n(if (read-msg ''upgrade)\n  [\"upgrade\"]\n  [(create-table ledger)]\n)\n"}},"signers":[{"pubKey":"8cc8da8ea7cbfaf6510dbc5f402b025dceaa9a3eaf7145e0ba933d468b63d358"}],"meta":{"creationTime":1613412470,"ttl":150000,"gasLimit":150000,"chainId":"2","gasPrice":1.0e-12,"sender":"8cc8da8ea7cbfaf6510dbc5f402b025dceaa9a3eaf7145e0ba933d468b63d358"},"nonce":"install kswap.abc on mainnet chain 2"}'
