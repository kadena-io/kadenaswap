
(load "../exchange.repl")
(load "..//util/guards.repl")

(begin-tx)
(env-data {
  'ns: "swap",
  'upgrade: false,
  'swap-deadline: "2021-03-15T00:00:00Z",
  'final-deadline: "2021-03-30T00:00:00Z" })
(load "kpenny.pact")
(commit-tx)



(begin-tx)
(env-data
  { 'bob: ["bob"]
  , 'alice: ["alice"]
  })

(test-capability (coin.COINBASE))
(coin.coinbase "Bob" (read-keyset 'bob) 1000.0)
(coin.coinbase "Alice" (read-keyset 'alice) 10000.0)

(commit-tx)

;fungible test

(begin-tx)
(use fungible-v2-test)
(test-capability (swap.kpenny.CREDIT FUNDER_ACCT))
(swap.kpenny.credit FUNDER_ACCT FUNDER_GUARD FUNDER_BALANCE)
(commit-tx)

(fungible-v2-test.suite swap.kpenny fungible-test-helper-default "transfer-crosschain-tests")

(begin-tx)
(use fungible-v2-test)
(test-capability (swap.kpenny.DEBIT FUNDER_ACCT))
(swap.kpenny.debit FUNDER_ACCT FUNDER_BALANCE)
(commit-tx)


(begin-tx)

(env-sigs [
  { 'key: "bob"
  , 'caps:
    [(coin.TRANSFER "Bob" swap.kpenny.KPENNY_BANK 15.0)
     ()
    ]
  }])

(expect "Convert 15.0 kda to kpenny for Bob"
  "Write succeeded"
  (swap.kpenny.reserve "Bob" 15.0)
)

(expect "Kpenny credited for bob"
  (* 15.0 swap.kpenny.RESERVATION_RATE) (swap.kpenny.get-balance "Bob"))

(commit-tx)

(begin-tx)
(env-sigs [
  { 'key: "bob"
  , 'caps:
    [(coin.TRANSFER "Bob" swap.kpenny.KPENNY_BANK 1.0)

    ]
  }])

(expect "Convert 1.0 kda to kpenny for Bob"
  "Write succeeded"
  (swap.kpenny.reserve "Bob" 1.0)
)

(expect "Kpenny credited for bob"
  (* 16.0 swap.kpenny.RESERVATION_RATE) (swap.kpenny.get-balance "Bob"))

(expect "Past conversions are queried"
  [{"account": "Bob", "amount-kda": 15.0, "amount-kpenny": 15000000.0 }
  ,{"account": "Bob", "amount-kda": 1.0, "amount-kpenny": 1000000.0 } ]
  (swap.kpenny.read-reservations "Bob")
)
(commit-tx)

;;swap tests

;; add-liquidity
;;
(begin-tx)
(use swap.exchange)

(create-pair test.abc swap.kpenny "")

(env-sigs [
  { 'key: "bob"
  , 'caps:
    [(swap.kpenny.TRANSFER "Bob" (at 'account (get-pair test.abc swap.kpenny)) 10.0)
     (test.abc.TRANSFER "Bob" (at 'account (get-pair test.abc swap.kpenny)) 40.0)
    ]
  }])

(expect "add-liquidity"
  { "liquidity": 19.9
  , "supply": 20.0
  , "amount0": 10.0
  , "amount1": 40.0 }
  (add-liquidity
    swap.kpenny
    test.abc
    10.0
    40.0
    10.0
    40.0
    "Bob"
    "Bob"
    (read-keyset 'bob)
    ))

(expect "kda debited for bob"
  15999990.0 (swap.kpenny.get-balance "Bob"))
(expect "abc debited for bob"
  1960.0 (test.abc.get-balance "Bob"))
(expect "kda credited for pair"
  10.0 (swap.kpenny.get-balance (at 'account (get-pair swap.kpenny test.abc))))
(expect "abc credited for pair"
  40.0 (test.abc.get-balance (at 'account (get-pair swap.kpenny test.abc))))

(commit-tx)


;;redeem without removing liquidity

(begin-tx)

(env-sigs [
  { 'key: ""
  , 'caps:
    [(coin.TRANSFER "kpenny-bank" "Bob" 16.0)]
  },
  { 'key: "bob"
  , 'caps: [(swap.kpenny.REDEEM "Bob")]
  }
])

(env-data
  { 'bob: ["bob"]
})


(expect "kpenny balance before redemption"
  15999990.0 (swap.kpenny.get-balance "Bob"))

(expect "kda balance before redemption"
  1984.0 (coin.get-balance "Bob"))

(expect "kpenny balance before redeem for unremoved liquidity token"
  10.0 (swap.kpenny.get-balance (at 'account (swap.exchange.get-pair swap.kpenny test.abc))))

(expect "kda balance for kpenny-bank before redemption"
  16.0 (coin.get-balance 'kpenny-bank))

(expect-failure
  "Chain time must be after 2021-03-30T00:00:00Z"
  (swap.kpenny.redeem "Bob" "Bob" (read-keyset 'Bob))
)

(env-chain-data { 'block-time: (time "2021-03-30T00:00:01Z" )})

(swap.kpenny.redeem "Bob" "Bob" (read-keyset 'bob))

(expect "kpenny balance after redeem for Bob"
  0.0 (swap.kpenny.get-balance "Bob"))

(expect "kda balance after redeem for Bob"
  1999.99999 (coin.get-balance "Bob"))

(expect "kpenny balance for unremoved liquidity token"
  10.0 (swap.kpenny.get-balance (at 'account (swap.exchange.get-pair swap.kpenny test.abc))))

(expect "kda balance for kpenny-bank"
  0.00001 (coin.get-balance 'kpenny-bank))

(rollback-tx)

;;Redeem after removing liquidty
(begin-tx)
(use swap.exchange)
(env-chain-data { 'block-time: (time "2021-03-14T00:00:01Z" )})
(env-sigs [
  { 'key: "bob"
  , 'caps:
    [(swap.kpenny.TRANSFER "Bob"
        (at 'account (get-pair test.abc swap.kpenny)) 10.0)
     (test.abc.TRANSFER "Bob"
        (at 'account (get-pair test.abc swap.kpenny)) 40.0)
     (swap.tokens.TRANSFER "swap.kpenny:test.abc" "Bob"
        (at 'account (get-pair test.abc swap.kpenny)) 19.9)
     (swap.kpenny.REDEEM "Bob")
    ]
  }])

(remove-liquidity
    swap.kpenny
    test.abc
    19.9
    0.0
    0.0
    "Bob"
    "Bob"
    (read-keyset 'bob)
)

(env-sigs [
  { 'key: ""
  , 'caps: [(coin.TRANSFER "kpenny-bank" "Bob" 16.0)]
  },
  { 'key: "bob",
    'caps: [(swap.kpenny.REDEEM 'Bob)]
  }
  ])

(expect "kpenny balance before redemption"
  15999999.95 (swap.kpenny.get-balance "Bob"))

(expect "kda balance before redemption"
  1984.0 (coin.get-balance "Bob"))

(expect "kpenny balance before redeem for unremoved liquidity token"
  0.05 (swap.kpenny.get-balance (at 'account (swap.exchange.get-pair swap.kpenny test.abc))))

(expect "kda balance for kpenny-bank before redemption"
  16.0 (coin.get-balance 'kpenny-bank))

(env-chain-data { 'block-time: (time "2021-03-30T00:00:01Z" )})

(swap.kpenny.redeem "Bob" "Bob" (read-keyset 'bob))

(expect "kpenny balance after redeem for Bob"
  0.0 (swap.kpenny.get-balance "Bob"))

(expect "kda balance after redeem for Bob"
  1999.99999995 (coin.get-balance "Bob"))

(rollback-tx)

;; precision test for redeem

(begin-tx)
(use swap.exchange)
(env-data
  { 'bob: ["bob"]
  , 'alice: ["alice"]
  })
(env-sigs [
  { 'key: ""
  , 'caps: [(coin.TRANSFER "kpenny-bank" "Bob" 16.0)
            (coin.TRANSFER "kpenny-bank" "Alice" (/ 0.10001 swap.kpenny.RESERVATION_RATE))
  ]
  },
  { 'key: "bob",
    'caps: [
      (swap.kpenny.TRANSFER "Bob" "Alice" 0.10001)
      (swap.kpenny.REDEEM 'Bob)]
  }
  { 'key: "alice",
    'caps: [(swap.kpenny.REDEEM 'Alice)]
  }
  ])

(env-chain-data { 'block-time: (time "2021-03-14T00:00:01Z" )})

(expect "transfer kpenny to Alice"
  "Write succeeded"
  (swap.kpenny.transfer-create "Bob" "Alice" (read-keyset 'alice) 0.00000000000001))

(expect "kpenny balance before redeem for unremoved liquidity token"
  15999989.99999999999999 (swap.kpenny.get-balance "Bob"))

(expect "kda balance for kpenny-bank before redemption"
  16.0 (coin.get-balance 'kpenny-bank))

(env-chain-data { 'block-time: (time "2021-03-30T00:00:01Z" )})

(expect "Redeem Bob's balance floored at coin.precision"
  { "account": "Bob",
    "balance": 15999989.99999999999999,
    "redeem-account": "Bob",
    "redeem-kda": 15.999989999999,
    "redeem-guard": (read-keyset 'bob)
  }
  (swap.kpenny.redeem "Bob" "Bob" (read-keyset 'bob))
)

(expect "kpenny balance after redeem for Bob"
  0.0 (swap.kpenny.get-balance "Bob"))

(expect "kda balance after redeem for Bob"
  1999.999989999999 (coin.get-balance "Bob"))

(rollback-tx)

;; test upgradeability
(begin-tx)
(env-data
  { 'swap-ns-user: []
  , 'swap-ns-admin: []
  , 'ns: "swap"
  , 'upgrade: true
  , 'swap-deadline: "2021-03-15T00:00:00Z"
  , 'final-deadline: "2021-03-30T00:00:00Z" })
(load "kpenny.pact")
(commit-tx)

;;Deadline Test
